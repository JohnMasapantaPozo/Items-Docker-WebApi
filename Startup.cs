using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.Serializers;
using MongoDB.Driver;
using WebApiDEMO.Config;
using WebApiDEMO.Repositories;

namespace WebApiDEMO
{
    public class Startup
    {
        public IConfiguration Configuration { get; }

        public Startup(IConfiguration configuration)
        {
            /* Constructor:
                This constructor expects an instance of IConfiguration which
                represents a key value pair. It is populated automatically by
                .NET from appsettings.json. 
            */
            this.Configuration = configuration;
        }

        public void ConfigureServices(IServiceCollection services)
        {
            /* ConfigureServices
                This method gets called by the runtime. Use this method to add
                services to the container. It's responsible for configuring the
                services (dependencies) that the API app will use.
            */

            // This specifies the database should serialize guiid's and dates as strings just for ease.
            BsonSerializer.RegisterSerializer(new GuidSerializer(MongoDB.Bson.BsonType.String));
            BsonSerializer.RegisterSerializer(new DateTimeOffsetSerializer(MongoDB.Bson.BsonType.String));
            
            /* Temporarily I registered in-memory data repository. TODO: To be updated by a MongoDB.
                Now replaced the in-memory Data reporitory by a MongoDB running on Docker.
                // services.AddSingleton<IItemsRepository, InMemoryItemsRepository>();
            */

            services.AddSingleton<IMongoClient>(

                /* Get configSection from Configuration. Then create a MongoClient
                by passing the connection string generated by MongoDbConfig.
                */

                ServiceProvider => 
                {
                    var configSection = Configuration.GetSection(nameof(MongoDbConfig)); //.Get<MongoDbConfig>();
                    MongoDbConfig config = configSection.Get<MongoDbConfig>();
                    
                    return new MongoClient(config.ConnectionString);
                    // return new MongoClient("mongodb://localhost:27017");
                });
            
            /* How is the MongoClient injected into MongoDbItemsRepository?

                The dependency injection system DI knows that MongoDbItemsRepository expects an IMongoClient.
                To inject this client into the MongoDbItemsRepository, it looks into the registered services
                for a registered implementation of type IMongoClient. The DI invokes it and then injects it
                into the MongoDbItemsRepository constructor.

                The DI repeats this process for every time a MongoDbItemsRepository object is created, and
                given IMongoClient is registered as a singleton, this gets reused every time.
            */
            
            services.AddSingleton<IItemsRepository, MongoDbItemsRepository>();

            services.AddControllers();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "WebApiDEMO", Version = "v1" });
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "WebApiDEMO v1"));
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
